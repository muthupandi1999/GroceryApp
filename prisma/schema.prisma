// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
  branchManager
  posOpearator
  subAdmin
  deliveryBoy
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  email        String?     
  firstName    String?
  lastName     String?
  phoneNo      String?     @unique
  role         Role[]      @default([user])
  profileImage String?
  Address      Address[]
  isActive     Boolean     @default(true)
  AddToCart    AddToCart[]
  Order        Order[]
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @updatedAt
}

model OtpValidationEmail {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  secret     String
  otp        String
  countLimit Int       @default(0)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model OtpValidationPhone {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  phoneNo    String
  secret     String
  otp        String
  countLimit Int       @default(0)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

// model OtpValidation {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   phoneNo    String
//   secret     String
//   otp        String
//   countLimit Int    @default(0)
// }

// model PasswordOtpValidation {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   email      String
//   secret     String
//   otp        String
//   countLimit Int    @default(0)
// }

enum Status {
  Active
  Inactive
}

enum Label {
  Home
  Work
  Other
}

model Address {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  address   String
  apartment String
  pincode   Int
  label     Label     @default(Home)
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  Order     Order[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum isFeatured {
  Yes
  No
}

model ProductCategory {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String
    defaultRoute String?
  isActive     Boolean        @default(true)
  productTypes productTypes[]
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
}

model productTypes {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  image             String
  defaultRoute String?
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId String          @db.ObjectId
  products          Products[]
  Banner            Banner?
  isActive          Boolean         @default(true)
  createdAt         DateTime?       @default(now())
  updatedAt         DateTime?       @updatedAt
}

type productDetails {
  key   String
  value String
}

model ProductAssets {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  imageList String[]
  product   Products? @relation(fields: [productId], references: [id]) // references `id` of `Profile`
  productId String?   @unique @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Products {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  productCode       String
  name              String
  shortDescription  String
  description       productDetails[]
  image             ProductAssets?
  ProductAssetsId   String             @unique @db.ObjectId
  rating            Float?
  ratingCount       Int                @default(0)
  tags              Tags?              @relation(fields: [tagId], references: [id])
  tagId             String?            @db.ObjectId
  ProductType       productTypes       @relation(fields: [productTypeId], references: [id])
  productTypeId     String             @db.ObjectId
  isActive          Boolean            @default(true)
  dicountPercentage Float?
  discountType      DiscountType?
  AddToCart         AddToCart[]
  variant           Variants[]
  ProductInventory  ProductInventory[]
  campaign          Campaign?          @relation(fields: [campaignId], references: [id])
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  campaignId        String?            @db.ObjectId
  sellingCount      Int                @default(0)
}

model Tags {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Products[]
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

enum Unit {
  gm
  kg
  pcs
  ml
  ltr
  pack
  each
}

model Variants {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  unit             Unit
  size             String?
  price            Float
  values           String
  branch           Branch?            @relation(fields: [branchId], references: [id])
  branchId         String?            @db.ObjectId
  product          Products?          @relation(fields: [productsId], references: [id])
  productsId       String?            @db.ObjectId
  AddToCart        AddToCart?
  ProductInventory ProductInventory[]
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
}

model ProductInventory {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  product               Products  @relation(fields: [productId], references: [id])
  productId             String    @db.ObjectId
  variant               Variants  @relation(fields: [variantId], references: [id])
  variantId             String    @db.ObjectId
  branch                Branch?   @relation(fields: [branchId], references: [id])
  branchId              String?   @db.ObjectId
  stock                 Float
  availableStock        Float
  minimumAvailableStock Float
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
}

model AddToCart {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  product           Products  @relation(fields: [productId], references: [id])
  productId         String    @db.ObjectId
  quantity          Int
  totalPrice        Int?
  user              User?     @relation(fields: [userId], references: [id])
  userId            String?   @db.ObjectId
  deviceToken       String?
  isOrder           Boolean   @default(false)
  selectedVariant   Variants? @relation(fields: [selectedVariantId], references: [id])
  selectedVariantId String?   @unique @db.ObjectId
  Order             Order?    @relation(fields: [orderId], references: [id])
  orderId           String?   @db.ObjectId
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

enum DiscountType {
  Fixed
  Percentage
}

model Coupon {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  code               String
  discount           Float        @default(0)
  discountType       DiscountType @default(Fixed)
  startDate          DateTime
  endDate            DateTime
  minimumOrderAmount Float
  maximumDiscount    Float
  limitPerUser       Int?
  description        String
  isActive           Boolean      @default(true)
  Order              Order[]
  createdAt          DateTime?    @default(now())
  updatedAt          DateTime?    @updatedAt
}

model Campaign {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean    @default(true)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  products    Products[]
}

model Admin {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String
  password        String
  confirmPassword String
  role            Role[]    @default([admin])
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model Branch {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  phoneNo          String
  latitude         String
  longitude        String
  Order            Order[]
  Variants         Variants[]
  ProductInventory ProductInventory[]
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
}

enum OrderType {
  Takeaway
  Delivery
}

enum paymentMethod {
  CARD
  BANK
  CASH
}

enum paymentStatusType {
  Success
  Failed
  Pending
}

enum OrderStatus {
  PENDING
  CONFIRMED
  OUTFORDELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  REJECTED
}

model Order {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String
  orderTime         DateTime
  orderType         OrderType
  orderStatus       OrderStatus       @default(PENDING)
  address           Address?          @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String?           @db.ObjectId
  addToCart         AddToCart[]
  user              User?             @relation(fields: [userId], references: [id])
  userId            String?           @db.ObjectId
  coupon            Coupon?           @relation(fields: [couponId], references: [id])
  couponId          String?           @db.ObjectId
  paymentStatus     paymentStatusType @default(Pending)
  paymentType       paymentMethod
  orderAmount       Int
  branch            Branch?           @relation(fields: [branchId], references: [id])
  branchId          String?           @db.ObjectId
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
}

model supplierProductInventory {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String    @unique
  productCode           String    @unique
  totalStock            Float
  unit                  Unit
  availableStock        Float
  minimumAvailableStock Float     @default(10.0)
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
}

model Banner {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  image         String
  ProductType   productTypes @relation(fields: [productTypeId], references: [id])
  productTypeId String       @unique @db.ObjectId
}
